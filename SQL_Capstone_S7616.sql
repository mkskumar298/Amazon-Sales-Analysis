CREATE DATABASE Amazon;

USE Amazon;

CREATE TABLE amazonsales(invoice_id VARCHAR(30) PRIMARY KEY, branch VARCHAR(5) NOT NULL, city VARCHAR(30) NOT NULL, 
customer_type VARCHAR(30) NOT NULL, gender VARCHAR(10) NOT NULL, product_line VARCHAR(100) NOT NULL, 
unit_price DECIMAL(10,2) NOT NULL, quantity int NOT NULL, VAT FLOAT NOT NULL, total DECIMAL(10,2) NOT NULL, 
date DATE NOT NULL, time TIME NOT NULL, payment_method VARCHAR(200) NOT NULL, 
cogs DECIMAL(10,2) NOT NULL, gross_margin_percentage FLOAT NOT NULL, gross_income DECIMAL(10,9) NOT NULL, rating FLOAT NOT NULL);

SELECT *
FROM amazonsales
WHERE Invoice_ID  IS NULL OR Branch IS NULL OR
 City IS NULL OR Customer_Type IS NULL OR Gender IS NULL OR Product_Line IS NULL OR
 Unit_Price IS NULL OR Quantity IS NULL OR VAT IS NULL OR Total IS NULL OR
 date IS NULL OR Time IS NULL OR Payment_method IS NULL OR Cogs IS NULL OR
 Gross_Margin_Percentage IS NULL OR Gross_Income IS NULL;
 
 -- Add a new column named timeofday to give insight of sales in the Morning, Afternoon and Evening
 
ALTER TABLE amazonsales ADD COLUMN timeofday VARCHAR(20);
UPDATE amazonsales
SET timeofday = CASE 
    WHEN HOUR(time) BETWEEN 6 AND 12 THEN 'Morning'
    WHEN HOUR(time) BETWEEN 12 AND 18 THEN 'Afternoon'
    ELSE 'Evening'
END;

-- Add a new column named dayname that contains the extracted days of the week on which the given transaction took place 

ALTER TABLE amazonsales ADD COLUMN dayname VARCHAR(10);
UPDATE amazonsales
SET dayname = DAYNAME(date);

-- Add a new column named monthname that contains the extracted months of the year on which the given transaction took place 

ALTER TABLE amazonsales ADD COLUMN monthname VARCHAR(10);
UPDATE amazonsales
SET monthname = MONTHNAME(date);

-- Business Questions To Answer:

-- 1) What is the count of distinct cities in the dataset?
SELECT COUNT(DISTINCT city) AS distinct_city_count FROM amazonsales; -- count() returns number of distinct cities

-- 2)For each branch, what is the corresponding city?
SELECT branch, city FROM amazonsales GROUP BY branch, city ORDER BY branch asc; -- GROUP BY clause used to get branches with their cities

-- 3)What is the count of distinct product lines in the dataset?
SELECT COUNT(DISTINCT product_line) AS distinct_product_line_count FROM amazonsales; -- DISTINCT is used within COUNT() to find unique product lines

-- 4)Which payment method occurs most frequently?
SELECT payment_method, COUNT(*) AS occurrence_count -- COUNT() here is used to obtain the number of times that payment method is used
FROM amazonsales
GROUP BY payment_method -- GROUP BY clause is used here to get the count with respect to each payment method 
ORDER BY occurrence_count DESC
LIMIT 1; -- LIMIT 1 is used to obtain the most preferred payment method

-- 5)Which product line has the highest sales?
SELECT product_line, SUM(total) AS total_sales -- SUM() is used here to get sum total of that particular product line
FROM amazonsales
GROUP BY product_line -- GROUP BY clause is used here to get the total with respect to individual product line
ORDER BY total_sales DESC
LIMIT 1; -- LIMIT 1 is used to obtain the product line with highest sales

-- 6)How much revenue is generated each month?
SELECT monthname, SUM(total) AS monthly_revenue -- SUM() is used here to get sum total of monthly revenue
FROM amazonsales
GROUP BY monthname -- GROUP BY Clause is here used to get sum total of each month
ORDER BY monthly_revenue DESC; -- Descending order is used to arrange in desending order of revenue

-- 7)In which month did the cost of goods sold reach its peak?
SELECT monthname, SUM(cogs) AS total_cogs -- SUM() is used to get total cost of goods sold
FROM amazonsales
GROUP BY monthname -- GROUP BY clause is used to obtain COGS of individual months
ORDER BY total_cogs DESC -- Descending is used to arrange the total COGS in decending manner
LIMIT 1; -- LIMIT 1 is used to get the month with highest Cost of Goods Sold

-- 8)Which product line generated the highest revenue?
SELECT product_line, SUM(total) AS total_revenue -- SUM() is used here to get sum total 
FROM amazonsales
GROUP BY product_line -- GROUP BY Clause is here used to get sum total of each product line
ORDER BY total_revenue DESC -- Descending is used to arrange the total of each product line in decending manner
LIMIT 1; -- LIMIT 1 is used to get the product line with highest revenue

-- 9)In which city was the highest revenue recorded?
SELECT city, SUM(total) AS total_revenue -- SUM() is used here to get sum total revenue 
FROM amazonsales
GROUP BY city -- GROUP BY Clause is here used to get total revenue generated by each city
ORDER BY total_revenue DESC -- Descending is used to arrange the total revenue generated by each city in decending manner
LIMIT 1; -- LIMIT 1 is used to get the city with highest revenue

-- 10)Which product line incurred the highest Value Added Tax?
SELECT product_line, SUM(VAT) AS total_VAT -- SUM() is used here to get total VAT 
FROM amazonsales
GROUP BY product_line -- GROUP BY Clause is here used to get total VAT incurred by each product line
ORDER BY total_VAT DESC -- Descending is used to arrange the total VAT incurred by each product line in decending manner
LIMIT 1; -- LIMIT 1 is used to get the product line with highest VAT incurred

-- 11)For each product line, add a column indicating "Good" if its sales are above average, otherwise "Bad."

WITH Product_Sales AS (  -- A Common Table Expression "ProductSales" is made here to fetch product line and their sum toal
    SELECT 
        product_line, 
        SUM(total) AS total_sales
    FROM amazonsales
    GROUP BY product_line
),
Overall_Average AS ( -- another CTE "Overall Average is used to fetch average from total sales obtained by first CTE"
    SELECT AVG(total_sales) AS avg_sales
    FROM Product_Sales
)
SELECT 
    ps.product_line, -- table alias ps is used for product_sales to avoid ambuguity
    ps.total_sales,
    CASE -- CASE is used for giving conditions
        WHEN ps.total_sales > oa.avg_sales THEN 'Good' -- if total sales exceeds the average sales then perforance is ranked good
        ELSE 'Bad'
    END AS performance
FROM Product_Sales ps 
INNER JOIN Overall_Average oa;

-- 12)Identify the branch that exceeded the average number of products sold.
SELECT branch, SUM(quantity) AS total_quantity -- SUM() is used here to get sum total of all the quantities sold
FROM amazonsales
GROUP BY branch -- GROUP BY Clause is here used to get sum total of each branch
HAVING SUM(quantity) > (SELECT AVG(quantity) FROM amazonsales) -- HAVING clause is used to get only those branches with total sales higher than average sales
LIMIT 1; -- LIMIT 1 is used here to get the branch which exceeded the average number of products sold

-- 13)Which product line is most frequently associated with each gender?
SELECT gender, product_line, COUNT(*) AS occurrence_count -- here we ae selecting gender, product line and how many times they buy that product line
FROM amazonsales
GROUP BY gender, product_line -- GROUP BY clause here organises buying frequency of product line with the gender
ORDER BY gender, occurrence_count DESC; -- DESC arranges the most frequently used product line along with gender in descending manner

-- 14)Calculate the average rating for each product line.
SELECT product_line, AVG(rating) AS average_rating -- AVG() is used here to calculate average rating
FROM amazonsales
GROUP BY product_line -- GROUP BY clause shows average rating of each product line
ORDER BY average_rating DESC; -- ORDER BY clause arranges the average rating in descending manner

-- 15)Count the sales occurrences for each time of day on every weekday.
SELECT dayname, timeofday, COUNT(*) AS sales_count -- timeofday and count() is used to get count of sales at the specified time of day
FROM amazonsales
GROUP BY dayname, timeofday -- GROUP BY clause here gives sales count of day at the specific time 
HAVING dayname NOT IN ("saturday","sunday") -- here we need to find sales of only weekdays not weekends
ORDER BY dayname, timeofday;

-- 16)Identify the customer type contributing the highest revenue.
SELECT customer_type, SUM(total) AS total_revenue -- customer_type and SUM() is selected to find total sales done by customer
FROM amazonsales
GROUP BY customer_type -- GROUP BY clause here finds total sale of each individual customer
ORDER BY total_revenue DESC -- DESC is used to arrange the customers and revenue generated by them in descending manner
LIMIT 1; -- LIMIT 1 gives the customer with highest contribution to the total revenue

-- 17)Determine the city with the highest VAT percentage.
SELECT city, MAX(VAT / total * 100) AS max_VAT_percentage -- here we are using MAX() to find out the highest VAT percentage
FROM amazonsales
GROUP BY city -- GROUP BY clause groups the VAT percentage according to cities 
ORDER BY max_VAT_percentage DESC -- ORDER BY clause arranges the cities with their respective VAT percentages in descending manner
LIMIT 1; -- LIMIT 1 returns the city with highest VAT percentage

-- 18)Identify the customer type with the highest VAT payments.
SELECT customer_type, SUM(VAT) AS highest_VAT_payment -- here we are using SUM() to find out the customer type with highest VAT payment
FROM amazonsales
GROUP BY customer_type -- GROUP BY clause groups the VAT payments according to customer types 
ORDER BY highest_VAT_payment DESC -- ORDER BY clause arranges the customer types with their respective VAT payments in descending manner
LIMIT 1; -- LIMIT 1 returns the customer type with highest VAT payment

-- 19)What is the count of distinct customer types in the dataset?
SELECT COUNT(DISTINCT customer_type) AS distinct_customer_type_count -- COUNT(DISTINCT) is used here to find distinct customer types 
FROM amazonsales;

-- 20)What is the count of distinct payment methods in the dataset?
SELECT COUNT(DISTINCT payment_method) AS distinct_payment_method_count -- COUNT(DISTINCT) is used here to find distinct payment methods
FROM amazonsales;

-- 21)Which customer type occurs most frequently?
SELECT customer_type, COUNT(*) AS occurrence_count -- COUNT(*) is used to get ocurence count of customer type
FROM amazonsales
GROUP BY customer_type -- GROUP BY clause groups the customer types as per occurences
ORDER BY occurrence_count DESC -- ORDER BY clause arranges the customer types and their occurences in descending manner
LIMIT 1;  -- LIMIT 1 returns the customer type with most frequent occurence

-- 22)Identify the customer type with the highest purchase frequency.
SELECT customer_type, COUNT(invoice_id) AS purchase_frequency  -- COUNT(*) is used to get count of invoice ID to get purchase frequency
FROM amazonsales
GROUP BY customer_type -- GROUP BY clause groups the purchase frequency as per customer types
ORDER BY purchase_frequency DESC -- ORDER BY clause arranges the customer types and their occurences in descending manner
LIMIT 1; -- LIMIT 1 returns the customer type with highest purchase frequency

-- 23)Determine the predominant gender among customers.
SELECT gender AS predominant_gender, COUNT(*) AS gender_count -- COUNT(*) is used to get count of gender of both males and feamle customer
FROM amazonsales
GROUP BY gender -- GROUP BY clause groups the gender as male or female
ORDER BY gender_count DESC -- ORDER BY clause arranges the gender in descending manner
LIMIT 1; -- LIMIT 1 returns the most predominant gender among customers

-- 24)Examine the distribution of genders within each branch.
SELECT branch, gender, COUNT(*) AS gender_count -- COUNT(*) is used to get count of genders along with the branch they shop from
FROM amazonsales
GROUP BY branch, gender -- GROUP BY clause groups the genders according to the branch 
ORDER BY branch; -- ORDER BY clause here is used to find out distribution of genders within each branch

-- 25)Identify the time of day when customers provide the most ratings.
SELECT timeofday, COUNT(rating) AS rating_count -- COUNT(rating) is used to get count of ratings along with the time of the day
FROM amazonsales
GROUP BY timeofday -- GROUP BY clause here groups the each rating with time of the day 
ORDER BY rating_count DESC; -- DESC rearranges the rating with the time of day having most rating on the top

-- 26)Determine the time of day with the highest customer ratings for each branch.
WITH highest_rated_time AS ( -- Common Table Expression "highest_rated_time" is created to fetch branch, time of day and highest rating
    SELECT 
        branch, 
        timeofday, 
        MAX(rating) AS highest_customer_rating,
        RANK() OVER (PARTITION BY branch ORDER BY MAX(rating) DESC) AS timerank -- windows function RANK() used to designate rank to time of day
    FROM amazonsales
    GROUP BY branch, timeofday -- GROUP BY clause here groups individual rating with branch and time of the day 
)
SELECT branch, timeofday, highest_customer_rating  
FROM highest_rated_time -- here we are calling the CTE in SELECT statement
WHERE timerank = 1; -- we are returning the time of the day with highest rating for each branch

-- 27)Identify the day of the week with the highest average ratings.
SELECT dayname, AVG(rating) AS avg_rating -- AVG(rating) is used to find average rating
FROM amazonsales
GROUP BY dayname -- GROUP BY clause groups the average rating of each day
ORDER BY avg_rating DESC -- ORDER BY clause reorganizes the average with in decending manner
LIMIT 1; -- LIMIT 1 returns the day with highest average rating

-- 28)Determine the day of the week with the highest average ratings for each branch.
WITH Days_Rank AS ( -- Common Table Expression "Days_Rank" is used to fetch branch, day name, average rating and to assign rank)
    SELECT 
        branch, 
        dayname, 
        AVG(rating) AS highest_average_rating, -- Alias highest average rating is used to find highest average rating
        RANK() OVER (PARTITION BY branch ORDER BY AVG(rating) DESC) AS dayrank -- Windows function RANK() is used to assign rank to day thei acording to ratings
    FROM amazonsales
    GROUP BY branch, dayname -- GROUP BY clause here groups the ratings as per branch and dayname
)
SELECT branch, dayname, highest_average_rating
FROM Days_Rank -- here we are calling the CTE in the SELECT statement
WHERE dayrank = 1; -- Here the branch along with the day with highest rank in highest average rating is returned















